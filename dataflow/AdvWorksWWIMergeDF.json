{
	"name": "AdvWorksWWIMergeDF",
	"properties": {
		"description": "AdvWorksWWIMerge Data Flow",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AdventureWorksProducts",
						"type": "DatasetReference"
					},
					"name": "AdvWorksDBSource"
				},
				{
					"dataset": {
						"referenceName": "WWImportersStockItems",
						"type": "DatasetReference"
					},
					"name": "WWImportersDBSource"
				},
				{
					"dataset": {
						"referenceName": "WWImportersStockItems",
						"type": "DatasetReference"
					},
					"name": "WWImportersColorSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MergeDBProducts",
						"type": "DatasetReference"
					},
					"name": "MergeDBProductSink"
				},
				{
					"dataset": {
						"referenceName": "MergeDBClothes",
						"type": "DatasetReference"
					},
					"name": "MergeDBClothesSink"
				}
			],
			"transformations": [
				{
					"name": "SortByName"
				},
				{
					"name": "FilterDiscontinued"
				},
				{
					"name": "DeriveFinalCostAndProductType"
				},
				{
					"name": "DeriveProductType"
				},
				{
					"name": "SelectAdvWorksColumns"
				},
				{
					"name": "SelectWWImportersColumns"
				},
				{
					"name": "WWImportersColorsLookup"
				},
				{
					"name": "AdvWorksSplitClothesFromProducts"
				},
				{
					"name": "WWImportersSplitClothesFromProducts"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          MakeFlag as boolean,",
				"          FinishedGoodsFlag as boolean,",
				"          Color as string,",
				"          SafetyStockLevel as integer,",
				"          ReorderPoint as integer,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          SizeUnitMeasureCode as string,",
				"          WeightUnitMeasureCode as string,",
				"          Weight as decimal(8,2),",
				"          DaysToManufacture as integer,",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ProductSubcategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> AdvWorksDBSource",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> WWImportersDBSource",
				"source(output(",
				"          ColorId as integer,",
				"          Color as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT ColorId, ColorName as Color FROM Warehouse.Colors',",
				"     format: 'query') ~> WWImportersColorSource",
				"WWImportersDBSource sort(asc(StockItemName, true),",
				"     caseInsensitive: true) ~> SortByName",
				"AdvWorksDBSource filter(isNull(SellEndDate)) ~> FilterDiscontinued",
				"SortByName derive(Cost = UnitPrice*(1+(TaxRate/100)),",
				"          ItemType = case(\r",
				"/* case syntax: case(condition, true_expression, false_expression) */\r",
				"in(['S','M','L','3XL','3XS','4XL','5XL','6XL','7XL','XS','XXS','XL','XXL'],Size),\r",
				"/* in will test if the value of the Size column matches any value of this array. Notice the square brackets representing the array */\r",
				"'Clothing', 'Product'\r",
				"/* if true, it's clothing, if false it is product */)) ~> DeriveFinalCostAndProductType",
				"SelectAdvWorksColumns derive(ItemType = case(\r",
				"/* case syntax: case(condition, true_expression, false_expression) */\r",
				"in(['S','M','L','XL'],Size),\r",
				"/* in will test if the value of the Size column matches any value of this array. Notice the square brackets representing the array */\r",
				"'Clothing', 'Product'\r",
				"/* if true, it's clothing, if false it is product */)) ~> DeriveProductType",
				"FilterDiscontinued select(mapColumn(",
				"          Name,",
				"          Color,",
				"          Cost = StandardCost,",
				"          RetailPrice = ListPrice,",
				"          Size",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAdvWorksColumns",
				"WWImportersColorsLookup select(mapColumn(",
				"          Name = StockItemName,",
				"          Color,",
				"          Cost,",
				"          RetailPrice = RecommendedRetailPrice,",
				"          Size,",
				"          ItemType",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWWImportersColumns",
				"DeriveFinalCostAndProductType, WWImportersColorSource lookup(WWImportersDBSource@ColorID == WWImportersColorSource@ColorId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> WWImportersColorsLookup",
				"DeriveProductType split(ItemType == 'Product',",
				"     disjoint: false) ~> AdvWorksSplitClothesFromProducts@(AdvWorksProducts, AdvWorksClothing)",
				"SelectWWImportersColumns split(ItemType == 'Products',",
				"     disjoint: false) ~> WWImportersSplitClothesFromProducts@(WWImportersProducts, WWImportersClothing)",
				"AdvWorksSplitClothesFromProducts@AdvWorksProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBProductSink",
				"WWImportersSplitClothesFromProducts@WWImportersProducts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBClothesSink"
			]
		}
	}
}